package bot

import (
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"log"
	"os"
	"tgbot/database"
	"tgbot/parser"
)

func Bot() {
	err := godotenv.Load("./resources/metadata/token/test_bot_token_example.env")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞")
	}

	botToken := os.Getenv("BOT_TOKEN")
	dbPath := "./resources/data/users.sqlite"

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	userDAO := database.NewUserDAO(dbPath)
	defer userDAO.Close()

	users := make(map[int64]*database.User) // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		user, exists := users[chatID]

		if !exists {
			dbUser, err := userDAO.GetUser(chatID)
			if err == nil && dbUser != nil {
				user = dbUser
			} else {
				user = &database.User{ID: chatID, State: "hello"}
				err := userDAO.SaveUser(user)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", err)
				}
			}
			users[chatID] = user
		}

		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", update.Message.From.UserName, update.Message.Text)

		switch user.State {

		// –≤—ã–±–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è/–∫–æ—Ä–ø—É—Å–∞/–ø—Ä–µ–ø–æ–¥–∞
		case "hello":
			users[chatID] = user
			if update.Message.Text == "üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì" {
				if user.EducationLevel == "" {
					user.State = "waiting_for_education"
					sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è", createEducationKeyboard)
				} else {
					user.State = "waiting_for_course"
					sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", createCourseKeyboard)
				}
			} else if update.Message.Text == "üë±‚Äç‚ôÇÔ∏è–ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞üë±" {
				user.State = "teacher"
				sendMessage(bot, chatID, "–ù–∞–ø–∏—à–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–æ–≤–∞–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ò–≤–∞–Ω–æ–≤)", nil)
			} else if update.Message.Text == "üè¢–ù–∞–π—Ç–∏ –∫–æ—Ä–ø—É—Åüè´" {
				user.State = "corpus_info"
				sendMessage(bot, chatID, "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞", createCorpusNum)
			} else if update.Message.Text == "/start" {
				sendMessage(bot, chatID, "–ü—Ä–∏–≤–µ—Ç, –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Ç–µ–±–µ –≤ —Ç–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏!", createHelloKeyboard)
			} else {
				sendMessage(bot, chatID, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", createHelloKeyboard)
			}

		case "waiting_for_education":
			user.EducationLevel = update.Message.Text
			switch user.EducationLevel {
			case "–í—ã—Å—à–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ":
				user.State = "waiting_for_course"
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", createCourseKeyboard)
			case "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
				user.State = "hello"
				sendMessage(bot, chatID, "–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞", createHelloKeyboard)
			default:
				sendMessage(bot, chatID, "–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", createEducationKeyboard)
			}
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
			user.UserName = update.Message.From.UserName
			err := userDAO.SaveUser(user)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: %s", err)
			}
			users[chatID] = user

		//–≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
		case "waiting_for_course":
			user.Course = update.Message.Text
			if update.Message.Text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥" {
				sendMessage(bot, chatID, "–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑", createHelloKeyboard)
				user.State = "hello"
			} else if user.Course == "ü§ì 1 –∫—É—Ä—Å" || user.Course == "üòé 2 –∫—É—Ä—Å" || user.Course == "üßê 3 –∫—É—Ä—Å" || user.Course == "üéì 4 –∫—É—Ä—Å" {
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", getGroupKeyboard(user.Course, user.EducationLevel))
				user.State = "select_group"
			} else {
				sendMessage(bot, chatID, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", createCourseKeyboard)
			}
		// –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
		case "select_group":
			user.Group = update.Message.Text

			if update.Message.Text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥" {
				user.State = "waiting_for_course"
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", createCourseKeyboard)
			} else {
				if user.Format == "" {
					sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", createPrintKeyboard)
					user.State = "select_format"
				} else {
					schedule := parser.Tab(user.Group, user.Format, user.EducationLevel)
					sendMessage(bot, chatID, schedule, createBackKeyboard)
					user.State = "waiting_for_return"
				}

			}
		// –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
		case "select_format":
			if update.Message.Text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥" {
				user.State = "select_group"
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", getGroupKeyboard(user.Course, user.EducationLevel))
			} else {
				user.Format = update.Message.Text
				schedule := parser.Tab(user.Group, user.Format, user.EducationLevel)
				sendMessage(bot, chatID, schedule, createBackKeyboard)
				user.State = "waiting_for_return"
				user.UserName = update.Message.From.UserName

				err := userDAO.SaveUser(user)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: %s", err)
				}
				// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞, —á—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
				delete(users, chatID)
			}
		// –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
		case "waiting_for_return":
			switch update.Message.Text {
			case "üìö –ö—É—Ä—Å":
				user.State = "waiting_for_course"
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", createCourseKeyboard)
			case "üè´ –ì—Ä—É–ø–ø–∞":
				user.State = "select_group"
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", getGroupKeyboard(user.Course, user.EducationLevel))
			case "üìã –í—ã–≤–æ–¥":
				user.State = "select_format"
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:", createPrintKeyboard)
			case "üéì–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
				user.State = "waiting_for_education"
				sendMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", createEducationKeyboard)
			case "„ÄΩÔ∏è–ù–∞—á–∞–ª–æ":
				user.State = "hello"
				sendMessage(bot, chatID, "–ß–µ–º –µ—â–µ –ø–æ–º–æ—á—å?", createHelloKeyboard)
			default:
				sendMessage(bot, chatID, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", createBackKeyboard)
			}

		// –≤—ã–≤–æ–¥ —É—á–∏—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		case "teacher":
			surname := update.Message.Text
			// –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
			teacher := parser.FindTeacher(surname)

			if teacher == nil || teacher.Picture == "" {
				user.State = "hello"
				users[chatID] = user
				sendMessage(bot, chatID, "–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å "+surname+" –Ω–µ –Ω–∞–π–¥–µ–Ω", createHelloKeyboard)
				break
			}
			// –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ –ø–∞—Ä—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
			lesson, _ := parser.FindCurrentLessons(teacher.FileName)

			handleMediaGroupInfo(bot, chatID, teacher.Surname+teacher.Name+teacher.Text+lesson, teacher.Picture, "")
			sendMessage(bot, chatID, "–ß–µ–º –µ—â–µ –ø–æ–º–æ—á—å?", createHelloKeyboard)
			user.State = "hello"
		// –Ω—É–∂–Ω—ã —Ñ–æ—Ç–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–ø—É—Å–æ–≤
		case "corpus_info":
			switch update.Message.Text {
			case "1":
				handleMediaGroupInfo(bot, chatID, "–≠–æ—Ç –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–º —Ç—É—Ç –ø–æ—Å–ª—É–∂–∏—Ç –æ–≥—Ä–æ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞(–∫—É—Ä–∏–ª–∫–∞)\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è, –¥.5", "AgACAgIAAxkBAAIMGGezl2jvC2ayVe3mLgMYwXFasFu2AAIJ6jEbElWZSSNHfcCmQC5DAQADAgADeQADNgQ", "AgACAgIAAxkBAAIMGmezl3wqE1b3QeT8-dcyzK_3fV1uAAIK6jEbElWZSeHvxteiCh53AQADAgADeQADNgQ")
			case "2":
				handleMediaGroupInfo(bot, chatID, "–í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å –∏–ª–∏ (–°–±–µ—Ä–±–∞–Ω–∫)\n–ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –∑–∏–ø–æ–≤—Å–∫–æ–π –∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–π. –ê –Ω–∞—à –æ—Ä–∏–µ–Ω—Ç–∏–∏—Ä —ç—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª—É–± Fenix\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 8", "AgACAgIAAxkBAAIMHGezl4EBvKI8oDrhd-1BowtoOdaXAAIL6jEbElWZSXNaIW1dEbN3AQADAgADeQADNgQ", "AgACAgIAAxkBAAIMHmezl4TKiWxTBBCpxje-a0mrZrFdAAIM6jEbElWZSanwqQY42zwPAQADAgADeQADNgQ")
			case "3":
				handleMediaGroupInfo(bot, chatID, "–¢—Ä–µ—Ç–∏–π –∫–æ—Ä–ø—É—Å\n–ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ —Ç—Ä–∞–º–≤–∞–π–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –ø–æ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 12", "AgACAgIAAxkBAAIMIGezl4ilhBlCPHXLOjJDgw0Jsl1WAAIN6jEbElWZSYM8NJomN7cjAQADAgADeQADNgQ", "AgACAgIAAxkBAAIMImezl4vq1hZcGzxjsHc2OhkR2T6GAAIO6jEbElWZSXtrNqSuGZE8AQADAgADeQADNgQ")
			case "4":
				handleMediaGroupInfo(bot, chatID, "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–æ—Ä–ø—É—Å\n–ù–∞—à –æ—Ä–∏–µ–Ω—Ç–∏–∏—Ä —ç—Ç–æ SubWay –∞ —Ç–æ—á–Ω–µ–µ —Å–ª–µ–≤–∞ –æ—Ç –Ω–µ–≥–æ\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 5/2", "AgACAgIAAxkBAAIMJGezl41-B1WQR58j6hmA2UofC5KBAAIP6jEbElWZSR0J-RkHYC4uAQADAgADeQADNgQ", "AgACAgIAAxkBAAIMKGezl5MOOzeENlVFHs_4OBT7FDxxAAIQ6jEbElWZSVYDwTwZvotcAQADAgADeQADNgQ")
			case "5":
				handleMediaGroupInfo(bot, chatID, "–ü—è—Ç—ã–π –∫–æ—Ä–ø—É—Å (—à–∫–æ–ª–∞)\n–ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∏—Å—Ç—Ä–æ–π–∫–µ –±—ã–≤—à–µ–π –≥–∏–º–Ω–∞–∑–∏–∏ –∏–º—Å–∏—Ç. –ù–æ —Ç–æ–ª—å–∫–æ –Ω–µ –ø—É—Ç–∞–π –Ω–∞—à –≤—Ö–æ–¥ —Å —Ç–æ—Ä—Ü–∞ –∞ –Ω–µ –≥–ª–∞–≤–Ω—ã–π\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 8", "AgACAgIAAxkBAAIMKmezl6KaBTFwpQ7yg2dfZmblKod6AAIR6jEbElWZSVPbb9zz5qnyAQADAgADeQADNgQ", "AgACAgIAAxkBAAIMLGezl6ZXWMGczOSPJM_u07L8yWMfAAIS6jEbElWZSYIvWM7Sy1obAQADAgADeQADNgQ")
			case "6":
				handleMediaGroupInfo(bot, chatID, "–®–µ—Å—Ç–æ–π –∫–æ—Ä–ø—É—Å(–î–∏–∑–∞–π–Ω–µ—Ä—ã)\n–Ω–∞—Ö–æ–¥–∏—å—Ç—Å—è –∑–∞ —É–≥–ª–æ–º –æ—Ç –º—Ñ—Ü –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 5–∫1", "AgACAgIAAxkBAAIMLmezl6keJdC81C60nlfGHnMTGCA2AAIT6jEbElWZSX8RQz9bs9sUAQADAgADeQADNgQ", "AgACAgIAAxkBAAIMMGezl6yQZVNzQilooWyezBIjyW8XAAIU6jEbElWZSRLQzWyvE7vuAQADAgADeQADNgQ")
			case "7":
				handleMediaGroupInfo(bot, chatID, "–°–µ–¥—å–º–æ–π –∫–æ—Ä–ø—É—Å\n–ù–∞—Ö–æ–¥–∏—å—Ç—Å—è —Å—Ä–∞–∑—É –∑–∞ –≥–ª–∞–≤–Ω—ã–º", "AgACAgIAAxkBAAIMsGe0YjrPKP6gsXW3DirbQL5nnHggAAKl6DEbcu2oSfG8npWC0fCrAQADAgADeQADNgQ", "AgACAgIAAxkBAAIMrme0YddRwEUphXHrn57bARP2EVE0AAKd6DEbcu2oSW71UXvpQVQ3AQADAgADeQADNgQ")
			case "8":
				handleMediaGroupInfo(bot, chatID, "–í–æ—Å—å–º–æ–π –∫–æ—Ä–ø—É—Å\n–Ω–∞—Ö–æ–¥–∏—Ç—å—Ç—Å—è —Å–ª–µ–≤–∞ –æ—Ç –∫–æ—Ä–ø—É—Å–∞ –ø—è—Ç—å –≤ –∑–¥–∞–Ω–∏–∏ –≥–∏–º–Ω–∞–∑–∏–∏\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 3", "AgACAgIAAxkBAAIMKmezl6KaBTFwpQ7yg2dfZmblKod6AAIR6jEbElWZSVPbb9zz5qnyAQADAgADeQADNgQ", "AgACAgIAAxkBAAIMNGezl7O4RORY0x7-mcw3Oxb1t0yIAAIV6jEbElWZSSclYr8g5AsbAQADAgADeQADNgQ")
			case "„ÄΩÔ∏è–ù–∞—á–∞–ª–æ":
				user.State = "hello"
				sendMessage(bot, chatID, "–ß–µ–º –µ—â–µ –ø–æ–º–æ—á—å?", createHelloKeyboard)
			default:
				sendMessage(bot, chatID, "–ù–∞–∂–º–∏ —Ü–∏—Ñ—Ä—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", nil)
			}
		}
	}
}

func sendMessage(api *tgbotapi.BotAPI, chatID int64, text string, keyboardFunc func() tgbotapi.ReplyKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	if keyboardFunc != nil {
		msg.ReplyMarkup = keyboardFunc()
	}
	api.Send(msg)
}

func getGroupKeyboard(course, education string) func() tgbotapi.ReplyKeyboardMarkup {
	switch education {
	case "–í—ã—Å—à–µ–µ":
		switch course {
		case "ü§ì 1 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(1)
			}
		case "üòé 2 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(2)
			}
		case "üßê 3 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(3)
			}
		case "üéì 4 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(4)
			}
		}

	case "–°—Ä–µ–¥–Ω–µ–µ":
		switch course {
		case "ü§ì 1 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(7)
			}
		case "üòé 2 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(8)
			}
		case "üßê 3 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(9)
			}
		case "üéì 4 –∫—É—Ä—Å":
			return func() tgbotapi.ReplyKeyboardMarkup {
				return createGroupKeyboardCourseById(10)
			}
		}

	default:
		return nil
	}
	return nil
}

func handleMediaGroupInfo(api *tgbotapi.BotAPI, chatID int64, text, fileID1, fileID2 string) {
	media1 := tgbotapi.NewInputMediaPhoto(tgbotapi.FileID(fileID1))
	media1.Caption = text
	var mediaGroup []interface{}
	mediaGroup = append(mediaGroup, media1)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –≤—Ç–æ—Ä–æ–π fileID
	if fileID2 != "" {
		media2 := tgbotapi.NewInputMediaPhoto(tgbotapi.FileID(fileID2))
		mediaGroup = append(mediaGroup, media2)
	}
	mediGroup := tgbotapi.NewMediaGroup(chatID, mediaGroup)

	api.Send(mediGroup)
}
